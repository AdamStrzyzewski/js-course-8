// why 2!=2===false

console.log(2 != 2)
// != // !(2 == 2)

console.log(2 != '2')

// == steps
// If the operands have the same type, they are compared as follows:
// Object: return true only if both operands reference the same object.
// String: return true only if both operands have the same characters in the same order.
// Number: return true only if both operands have the same value. +0 and -0 are treated as the same value. If either operand is NaN, return false; so NaN is never equal to NaN.
// Boolean: return true only if operands are both true or both false.
// BigInt: return true only if both operands have the same value.
// Symbol: return true only if both operands reference the same symbol.
// If one of the operands is null or undefined, the other must also be null or undefined to return true. Otherwise return false.
// If one of the operands is an object and the other is a primitive, convert the object to a primitive.
// At this step, both operands are converted to primitives (one of String, Number, Boolean, Symbol, and BigInt). The rest of the conversion is done case-by-case.
// If they are of the same type, compare them using step 1.
// If one of the operands is a Symbol but the other is not, return false.
// If one of the operands is a Boolean but the other is not, convert the boolean to a number: true is converted to 1, and false is converted to 0. Then compare the two operands loosely again.
// Number to String: convert the string to a number. Conversion failure results in NaN, which will guarantee the equality to be false.
// Number to BigInt: compare by their numeric value. If the number is Â±Infinity or NaN, return false.
// String to BigInt: convert the string to a BigInt using the same algorithm as the BigInt() constructor. If conversion fails, return false.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness